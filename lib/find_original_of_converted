#! /usr/bin/env bash

# find original by taking the photoid of a converted file (jpeg) without variant and extensions
# and look for a file in parent folder which matches that name (and is the original, hopefully)

set -eu

function is_variant() {
    [[ $1 =~ .+-[0-9]+ ]]
}

function original_photoid() {
    local -r converted_filename=$(basename "$1")
    local -r converted_photoid=${converted_filename%%.*}

    if is_variant "$converted_photoid"; then
        echo "${converted_photoid%-*}"
    else
        echo "$converted_photoid"
    fi
}

converted_file=$1
if ! [[ -e $converted_file ]]; then
    echo "[ERROR] given file $converted_file does not exist" >&2
    exit 1
fi

photoid=$(original_photoid "$converted_file")
originals_dir="$(dirname "$converted_file")/.."

original_matches=$(find "$originals_dir" -regextype posix-extended -maxdepth 1 -type f \
    -iregex ".+\.(ORF|RAW|JPG|CRW|CR2)" -name "${photoid}\.*")
matches_count=$(wc -l <<<"$original_matches")    
if [[ $matches_count = 1 ]]; then
    echo $(readlink -e "$original_matches")
elif [[ $matches_count = 2 ]]; then
    # TBD if we have original photofiles as both raw and jpg, we will find these two. And now how do we
    # find out if the converted file was created from raw or jpg? neither filenames or exif give any clue
    # -> for now, let's just assume there will never be converted versions of both the raw and the jpg original
    # -> if needed, we can introduce a parameter which allows to enforce either raw of jpeg
    echo -e "[ERROR] Found more than one file matching $photoid:\n$original_matches" >&2
    exit 1
fi